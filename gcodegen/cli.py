"""Command-line interface for GCodeGen."""

import argparse
import logging
import sys
from pathlib import Path

from . import __version__
from .config import Config
from .gcode import GCodeGenerator
from .svg import SVGDocument

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)


def parse_args(args=None):
    """Parse command line arguments.
    
    Args:
        args: Command line arguments (optional)
        
    Returns:
        Parsed arguments
    """
    parser = argparse.ArgumentParser(
        description="Convert SVG files to G-code for H.Airbrush device."
    )
    parser.add_argument(
        "--input", "-i", required=True, type=Path, help="Input SVG file path"
    )
    parser.add_argument(
        "--output", "-o", required=True, type=Path, help="Output G-code file path"
    )
    parser.add_argument(
        "--config", "-c", type=Path, help="Configuration YAML file path"
    )
    parser.add_argument(
        "--units",
        choices=["mm", "in"],
        default="mm",
        help="Units to use (default: mm)",
    )
    parser.add_argument(
        "--verbose", "-v", action="count", default=0, help="Increase verbosity"
    )
    parser.add_argument(
        "--version", action="version", version=f"GCodeGen {__version__}"
    )
    
    return parser.parse_args(args)


def setup_logging(verbosity):
    """Set up logging based on verbosity level.
    
    Args:
        verbosity: Verbosity level (0=INFO, 1=DEBUG)
    """
    if verbosity >= 1:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("Debug logging enabled")
    else:
        logging.getLogger().setLevel(logging.INFO)


def validate_files(input_file, output_file):
    """Validate input and output files.
    
    Args:
        input_file: Input file path
        output_file: Output file path
        
    Returns:
        True if files are valid, False otherwise
    """
    # Check if input file exists
    if not input_file.exists():
        logger.error(f"Input file not found: {input_file}")
        return False
        
    # Check if input file is an SVG file
    if input_file.suffix.lower() != ".svg":
        logger.error(f"Input file is not an SVG file: {input_file}")
        return False
        
    # Check if output directory exists
    output_dir = output_file.parent
    if not output_dir.exists():
        logger.warning(f"Output directory does not exist, creating: {output_dir}")
        try:
            output_dir.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            logger.error(f"Failed to create output directory: {e}")
            return False
            
    # Check if output file has .gcode extension
    if output_file.suffix.lower() != ".gcode":
        logger.warning(f"Output file does not have .gcode extension: {output_file}")
        
    return True


def convert_svg_to_gcode(input_file, output_file, config, units):
    """Convert SVG file to G-code.
    
    Args:
        input_file: Input SVG file path
        output_file: Output G-code file path
        config: Configuration object
        units: Units to use (mm or in)
        
    Returns:
        True if conversion was successful, False otherwise
    """
    try:
        # Parse SVG file
        logger.info(f"Parsing SVG file: {input_file}")
        svg_doc = SVGDocument(input_file)
        
        # Get paths from SVG
        paths = svg_doc.get_paths()
        if not paths:
            logger.error("No paths found in SVG file")
            return False
            
        logger.info(f"Found {len(paths)} paths in SVG file")
        
        # Create G-code generator
        generator = GCodeGenerator(config.config)
        
        # Add start commands
        generator.add_lines(generator.generate_start_commands())
        generator.add_line(generator.comment(f"Generated by GCodeGen {__version__}"))
        generator.add_line(generator.comment(f"Input file: {input_file.name}"))
        
        # Set units
        generator.add_line(generator.set_units(units))
        
        # Set absolute positioning
        generator.add_line(generator.set_absolute_positioning())
        
        # Home axes
        generator.add_line(generator.home_axes(x=True, y=True, z=True))
        
        # TODO: Implement full path to G-code conversion
        # For now, just add a simple square as a placeholder
        logger.warning("Full path to G-code conversion not yet implemented")
        logger.info("Adding placeholder square pattern")
        
        # Move to safe Z
        safe_z = config.get("machine.safe_z", 5)
        generator.add_line(generator.move_to(z=safe_z, feed_rate=1000))
        
        # Move to start position
        generator.add_line(generator.move_to(x=10, y=10, feed_rate=3000))
        
        # Lower to work Z
        generator.add_line(generator.move_to(z=0, feed_rate=1000))
        
        # Draw a square
        generator.add_line(generator.move_to(x=50, y=10, feed_rate=1500))
        generator.add_line(generator.move_to(x=50, y=50, feed_rate=1500))
        generator.add_line(generator.move_to(x=10, y=50, feed_rate=1500))
        generator.add_line(generator.move_to(x=10, y=10, feed_rate=1500))
        
        # Raise to safe Z
        generator.add_line(generator.move_to(z=safe_z, feed_rate=1000))
        
        # Add end commands
        generator.add_lines(generator.generate_end_commands())
        
        # Save G-code to file
        logger.info(f"Saving G-code to: {output_file}")
        if not generator.save_to_file(output_file):
            return False
            
        logger.info("Conversion completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"Error converting SVG to G-code: {e}")
        return False


def main():
    """Main entry point."""
    # Parse command line arguments
    args = parse_args()
    
    # Set up logging
    setup_logging(args.verbose)
    
    # Validate input and output files
    if not validate_files(args.input, args.output):
        sys.exit(1)
        
    # Load configuration
    config = Config(args.config)
    if not config.validate():
        logger.error("Invalid configuration")
        sys.exit(1)
        
    # Convert SVG to G-code
    if not convert_svg_to_gcode(args.input, args.output, config, args.units):
        sys.exit(1)
        
    sys.exit(0)


if __name__ == "__main__":
    main() 