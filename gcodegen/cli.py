"""Command-line interface for GCodeGen.

This module provides the command-line interface for converting SVG files to G-code.
"""

import argparse
import logging
import os
import sys
from pathlib import Path
from typing import Dict, List, Optional, Tuple

import yaml
from lxml import etree

from gcodegen.config import load_config
from gcodegen.svg import SVGDocument, SVGPath
from gcodegen.path_processor import PathProcessor
from gcodegen.airbrush import AirbrushController
from gcodegen.gcode import GCodeGenerator
from gcodegen import __version__

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(
        description="Convert SVG files to G-code for H.Airbrush device."
    )
    parser.add_argument(
        "--input", "-i", type=str, required=True, help="Input SVG file path"
    )
    parser.add_argument(
        "--output", "-o", type=str, help="Output G-code file path (default: input file with .gcode extension)"
    )
    parser.add_argument(
        "--config", "-c", type=str, help="Configuration file path (YAML)"
    )
    parser.add_argument(
        "--units", "-u", type=str, default="mm", choices=["mm", "in"],
        help="Output units (default: mm)"
    )
    parser.add_argument(
        "--debug", "-d", action="store_true", help="Enable debug output"
    )
    parser.add_argument(
        "--version", "-v", action="version", version=f"GCodeGen {__version__}"
    )
    
    return parser.parse_args()


def validate_files(input_path: str, output_path: Optional[str] = None) -> Tuple[Path, Path]:
    """Validate input and output file paths.
    
    Args:
        input_path: Input file path
        output_path: Output file path (optional)
        
    Returns:
        Tuple of validated input and output Path objects
        
    Raises:
        FileNotFoundError: If input file does not exist
        ValueError: If output directory does not exist
    """
    input_file = Path(input_path)
    if not input_file.exists():
        raise FileNotFoundError(f"Input file not found: {input_file}")
        
    if not output_path:
        output_file = input_file.with_suffix(".gcode")
    else:
        output_file = Path(output_path)
        
    # Ensure output directory exists
    output_dir = output_file.parent
    if not output_dir.exists():
        try:
            output_dir.mkdir(parents=True, exist_ok=True)
            logger.info(f"Created output directory: {output_dir}")
        except Exception as e:
            raise ValueError(f"Could not create output directory: {output_dir}") from e
            
    return input_file, output_file


def convert_svg_to_gcode(svg_file: Path, gcode_file: Path, config: Dict, units: str = "mm") -> bool:
    """Convert SVG file to G-code.
    
    Args:
        svg_file: Input SVG file path
        gcode_file: Output G-code file path
        config: Configuration dictionary
        units: Output units ("mm" or "in")
        
    Returns:
        True if conversion was successful, False otherwise
    """
    try:
        # Parse SVG file
        logger.info(f"Parsing SVG file: {svg_file}")
        svg_doc = SVGDocument(svg_file)
        
        # Create G-code generator
        gcode_gen = GCodeGenerator(config)
        
        # Create airbrush controller
        airbrush = AirbrushController(config)
        
        # Add header with version and input file info
        gcode_gen.add_line(f"; Generated by GCodeGen {__version__}")
        gcode_gen.add_line(f"; Input file: {svg_file.name}")
        
        # Add start commands
        gcode_gen.add_lines(gcode_gen.generate_start_commands())
        
        # Add machine initialization
        gcode_gen.add_lines(airbrush.generate_machine_initialization())
        
        # Process each path in the SVG
        paths = svg_doc.get_paths()
        logger.info(f"Found {len(paths)} paths in SVG")
        
        for i, svg_path in enumerate(paths):
            # Extract path data and attributes
            path_data = svg_path.path_data
            stroke_width = svg_path.stroke_width
            stroke_color = svg_path.stroke_color
            stroke_opacity = svg_path.stroke_opacity
            
            logger.info(f"Processing path {i+1}/{len(paths)}: "
                       f"width={stroke_width:.2f}mm, color={stroke_color}, "
                       f"opacity={stroke_opacity:.2f}")
            
            # Parse path data into commands
            path_commands = PathProcessor.parse_path(path_data)
            
            # Convert path commands to polyline
            polyline = PathProcessor.path_to_polyline(path_commands)
            
            # Apply SVG transformations to polyline
            transformed_polyline = []
            for x, y in polyline:
                # Apply the path's transformation matrix
                tx, ty = svg_path.apply_transform(x, y)
                transformed_polyline.append((tx, ty))
            
            # Generate G-code for the path
            path_gcode = airbrush.generate_path_commands(
                transformed_polyline, stroke_color, stroke_width, stroke_opacity
            )
            
            # Add path G-code to output
            gcode_gen.add_lines(path_gcode)
        
        # Add machine cleanup
        gcode_gen.add_lines(airbrush.generate_machine_cleanup())
        
        # Save G-code to file
        logger.info(f"Saving G-code to: {gcode_file}")
        success = gcode_gen.save_to_file(gcode_file)
        
        if success:
            logger.info("Conversion completed successfully")
        else:
            logger.error("Failed to save G-code file")
            
        return success
        
    except Exception as e:
        logger.error(f"Error converting SVG to G-code: {e}", exc_info=True)
        return False


def main():
    """Main entry point."""
    try:
        # Parse command-line arguments
        args = parse_args()
        
        # Set log level
        if args.debug:
            logging.getLogger().setLevel(logging.DEBUG)
            
        # Validate input and output files
        input_file, output_file = validate_files(args.input, args.output)
        
        # Load configuration
        config = load_config(args.config)
        
        # Convert SVG to G-code
        success = convert_svg_to_gcode(input_file, output_file, config, args.units)
        
        # Exit with appropriate status code
        sys.exit(0 if success else 1)
        
    except Exception as e:
        logger.error(f"Error: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    main() 